// -*- C++ -*-
//
// generated by wxGlade 0.7.2 (standalone edition) on Wed Jun 29 22:04:47 2016
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//
#include <string>
#include "database.h"
#include "selecttables.h"

// begin wxGlade: ::extracode
// end wxGlade



SelectTables::SelectTables(wxWindow* parent, wxWindowID id, const wxString& title, Database *db, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, style)
{
    m_db = db;
    // begin wxGlade: SelectTables::SelectTables
    m_panel = new wxPanel( this, wxID_ANY );
    m_tables = new wxListBox( m_panel, wxID_ANY, wxDefaultPosition, wxDefaultSize, 0, NULL, wxLB_MULTIPLE );
    m_showSystem = new wxCheckBox( m_panel, wxID_ANY, _( "&Show system tables" ) );
    m_open = new wxButton( m_panel, wxID_ANY, _( "&Open" ) );
    m_new = new wxButton( m_panel, wxID_ANY, _( "&New..." ) );
    m_cancel = new wxButton( m_panel, wxID_CANCEL, _( "&Cancel" ) );
    m_help = new wxButton( m_panel, wxID_ANY, _( "&Help" ) );

    set_properties();
    do_layout();
    // end wxGlade
	m_open->Bind( wxEVT_BUTTON, &SelectTables::OnOpenTables, this );
	m_showSystem->Bind( wxEVT_CHECKBOX, &SelectTables::OnShowSystemTables, this );
}

void SelectTables::GetSelectedTableNames(std::vector<wxString> &tableNames)
{
    wxArrayInt selections;
    m_tables->GetSelections( selections );
    for( size_t i = 0; i < selections.GetCount(); i++ )
		tableNames.push_back( m_tables->GetString( selections.Item( i ) ) );
}

void SelectTables::set_properties()
{
    // begin wxGlade: SelectTables::set_properties
    SetTitle( _( "Select Tables" ) );
    m_open->Enable( false );
    m_open->SetDefault();
    FillTableList( false );
    // end wxGlade
}


void SelectTables::do_layout()
{
    // begin wxGlade: SelectTables::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer( wxHORIZONTAL );
    wxBoxSizer* sizer_4 = new wxBoxSizer( wxHORIZONTAL );
    wxBoxSizer* sizer_5 = new wxBoxSizer( wxVERTICAL );
    wxBoxSizer* sizer_6 = new wxBoxSizer( wxHORIZONTAL );
    wxBoxSizer* sizer_8 = new wxBoxSizer( wxVERTICAL );
    wxBoxSizer* sizer_7 = new wxBoxSizer( wxVERTICAL );
    sizer_4->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_5->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_7->Add( m_tables, 0, wxEXPAND, 0 );
    sizer_7->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_7->Add( m_showSystem, 0, wxEXPAND, 0 );
    sizer_6->Add( sizer_7, 1, 0, 0 );
    sizer_6->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_8->Add( m_open, 0, wxALIGN_CENTER_HORIZONTAL, 0 );
    sizer_8->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_8->Add( m_new, 0, wxALIGN_CENTER_HORIZONTAL, 0 );
    sizer_8->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_8->Add( m_cancel, 0, wxALIGN_CENTER_HORIZONTAL, 0 );
    sizer_8->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_8->Add( m_help, 0, wxALIGN_CENTER_HORIZONTAL, 0 );
    sizer_8->Add( 30, 30, 0, wxEXPAND, 0 );
    sizer_6->Add( sizer_8, 1, 0, 0 );
    sizer_5->Add( sizer_6, 1, 0, 0 );
    sizer_5->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_4->Add( sizer_5, 1, 0, 0 );
    sizer_4->Add( 5, 5, 0, wxEXPAND, 0 );
    m_panel->SetSizer( sizer_4 );
    sizer_1->Add( m_panel, 1, 0, 0 );
    SetSizer( sizer_1 );
    sizer_1->Fit( this );
    Layout();
    // end wxGlade
}


BEGIN_EVENT_TABLE(SelectTables, wxDialog)
    // begin wxGlade: SelectTables::event_table
    EVT_LISTBOX(wxID_ANY, SelectTables::OnSelectingLBItem)
    // end wxGlade
END_EVENT_TABLE();


void SelectTables::OnSelectingLBItem(wxCommandEvent &event)
{
    m_open->Enable( true );
    event.Skip();
}

void SelectTables::OnOpenTables(wxCommandEvent &event)
{
	EndModal( dynamic_cast<wxButton *>( event.GetEventObject() )->GetId() );
}

// wxGlade: add SelectTables event handlers

void SelectTables::FillTableList(bool sysTableIncluded)
{
    m_tables->Clear();
    std::wstring type = m_db->GetTableVector().m_type;
    std::map<std::wstring,std::vector<DatabaseTable *> > tables = m_db->GetTableVector().m_tables;
    std::wstring dbName = m_db->GetTableVector().m_dbName;
    for( std::map<std::wstring,std::vector<DatabaseTable *> >::iterator it = tables.begin(); it != tables.end(); it++ )
    {
        if( (*it).first == dbName )
        {
            for( std::vector<DatabaseTable *>::iterator it1 = (*it).second.begin(); it1 < (*it).second.end(); it1++ )
            {
                std::wstring tableName = (*it1)->GetTableName();
                if( type == L"SQLite" )
                {
                    if( !sysTableIncluded && tableName.substr( 0, 6 ) != L"sqlite" )
                        m_tables->Append( tableName );
                    else if( sysTableIncluded )
                        m_tables->Append( tableName );
                }
                if( type == L"ODBC" )
                {
                    if( !sysTableIncluded )
                    {
                        if( ( ( tableName.substr( 0, 3 ) != L"sys" ) && ( tableName.substr( 0, 18 ) != L"INFORMATION_SCHEMA" ) ) )
                            m_tables->Append( tableName.substr( 4 ) );
                    }
                    else
                    {
                        if( tableName.substr( 0, 3 ) == L"dbo" )
                            tableName = tableName.substr( 4 );
                        m_tables->Append( tableName );
                    }
                }
            }
        }
    }
    Layout();
}

void SelectTables::OnShowSystemTables(wxCommandEvent &event)
{
    if( m_showSystem->IsChecked() )
        FillTableList( true );
    else
        FillTableList( false );
}
