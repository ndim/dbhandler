// -*- C++ -*-
//
// generated by wxGlade 0.7.2 (standalone edition) on Mon Nov 28 23:55:36 2016
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//
// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#ifndef WX_PRECOMP
    #include "wx/wx.h"
    #include "wx/stockitem.h"
#endif

#include <memory>
#include "wx/notebook.h"
#include "wx/bmpcbox.h"
#include "wx/docmdi.h"
#include "wx/filepicker.h"
#include "wx/fontenum.h"
#ifdef __WXGTK__
#include "gtk/gtk.h"
#include "wx/nativewin.h"
#endif
#ifdef __WXOSX_COCOA__
#include "wx/nativewin.h"
#endif
#include "database.h"
#include "propertypagebase.h"
#include "tablegeneral.h"
#include "fontpropertypagebase.h"
#include "fieldgeneral.h"
#include "designlabelgeneral.h"
#include "pointerproperty.h"
#include "bandgeneral.h"
#include "fieldheader.h"
#include "propertieshandler.h"
#include "properties.h"

#if _MSC_VER >= 1900 || !(defined __WXMSW__)
std::mutex Database::Impl::my_mutex;
#endif
const wxEventTypeTag<wxCommandEvent> wxEVT_SET_TABLE_PROPERTY( wxEVT_USER_FIRST + 1 );
const wxEventTypeTag<wxCommandEvent> wxEVT_SET_FIELD_PROPERTY( wxEVT_USER_FIRST + 2 );

PropertiesDialog::PropertiesDialog(wxWindow* parent, wxWindowID id, const wxString& title, std::unique_ptr<PropertiesHandler> &handler, wxCriticalSection &cs):
    wxDialog(parent, id, title)
{
    std::vector<std::wstring> errors;
    pcs = &cs;
    m_isApplied = false;
    // begin wxGlade: PropertiesDialog::PropertiesDialog
    m_properties = new wxNotebook( this, wxID_ANY );
/*    if( type == 2 )
    {
        m_page7 = new DesignLabelGeneral( m_properties, prop );
        m_page2 = new CFontPropertyPage( m_properties, prop->m_font );
        m_properties->AddPage( m_page7, _( "General" ) );
        m_properties->AddPage( m_page2, _( "Font" ) );
//        m_properties->AddPage( m_page2, _( "Font" ) );
    }
    if( type == DividerProperties )
    {
        m_page8 = new BandGeneralProperties( m_properties, prop );
        m_properties->AddPage( m_page8, _( "General" ) );
        m_page9 = new PointerPropertiesPanel( m_properties, prop->m_cursorFile, prop->m_stockCursor );
        m_properties->AddPage( m_page9, _( "Cursor" ) );
    }*/
    handler->EditProperies( m_properties );
    set_properties();
    do_layout();
    // end wxGlade
    wxButton *apply = dynamic_cast<wxButton *>( FindWindowById( wxID_APPLY ) );
    wxButton *ok = dynamic_cast<wxButton *>( FindWindowById( wxID_OK ) );
    ok->SetDefault();
    apply->Enable( false );
    apply->Bind( wxEVT_BUTTON, &PropertiesDialog::OnApply, this );
    apply->Bind( wxEVT_UPDATE_UI, &PropertiesDialog::OnApplyUpdateUI, this );
    ok->Bind( wxEVT_BUTTON, &PropertiesDialog::OnOk, this );
}

void PropertiesDialog::set_properties()
{
    // begin wxGlade: PropertiesDialog::set_properties
//    SetTitle( _( "dialog_1" ) );
    // end wxGlade
}

void PropertiesDialog::do_layout()
{
    // begin wxGlade: PropertiesDialog::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer( wxHORIZONTAL );
    wxBoxSizer* sizer_2 = new wxBoxSizer( wxVERTICAL );
    wxBoxSizer* sizer_3 = new wxBoxSizer( wxVERTICAL );
    wxSizer* buttonSizer = CreateButtonSizer( wxOK | wxCANCEL | wxAPPLY | wxHELP );
    sizer_1->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_3->Add( m_properties, 0, wxEXPAND, 0 );
    sizer_3->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_3->Add( buttonSizer, 0, wxEXPAND, 0 );
    sizer_2->Add( sizer_3, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_1->Add( sizer_2, 0, wxEXPAND, 0 );
    sizer_1->Add( 5, 5, 0, wxEXPAND, 0 );
    SetSizerAndFit( sizer_1 );
//    sizer_1->Fit( this );
    Layout();
    // end wxGlade
}

void PropertiesDialog::OnApply(wxCommandEvent &WXUNUSED(event))
{
    if( ApplyProperties() )
        dynamic_cast<wxButton *>( FindWindowById( wxID_APPLY ) )->Enable( false );
}

void PropertiesDialog::OnOk(wxCommandEvent &WXUNUSED(event))
{
    if( !m_isApplied )
        ApplyProperties();
    EndModal( wxID_OK );
}

bool PropertiesDialog::ApplyProperties()
{
    bool result = true;
    bool isModified = false;
    for( int i = 0; i < m_properties->GetPageCount(); ++i )
    {
        PropertyPageBase *page = dynamic_cast<PropertyPageBase *>( m_properties->GetPage( i ) );
        if( page->IsModified() )
            isModified = true;
    }
    std::vector<std::wstring> errors;
/*    if( m_type == DatabaseTableProperties )
    {
        if( !m_isApplied && isModified )
        {
        }
    }*/
/*    if( m_type == DatabaseFieldProperties )
    {
        if( !m_isApplied && isModified )
        {
/*            static_cast<FieldProperties *>( m_object )->m_comment = m_page5->GetCommentCtrl()->GetValue().ToStdWstring();
            static_cast<FieldProperties *>( m_object )->m_label = m_page6->GetLabelCtrl()->GetValue().ToStdWstring();
            static_cast<FieldProperties *>( m_object )->m_heading = m_page6->GetHeadingCtrl()->GetValue().ToStdWstring();
            wxCommandEvent event( wxEVT_SET_FIELD_PROPERTY );
            event.SetInt( IsLogOnly() );
            event.SetExtraLong( m_type );
            event.SetClientData( &m_object );
            dynamic_cast<wxDocMDIChildFrame *>( GetParent() )->GetView()->ProcessEvent( event );
            if( event.GetString() == "Failed" )
                result = false;
        }
    }*/
    m_isApplied = true;
    isModified = false;
    return result;
}

const std::wstring &PropertiesDialog::GetCommand()
{
    return m_command;
}

void PropertiesDialog::OnApplyUpdateUI (wxUpdateUIEvent &event)
{
    for( int i = 0; i < m_properties->GetPageCount(); ++i )
    {
        PropertyPageBase *page = dynamic_cast<PropertyPageBase *>( m_properties->GetPage( i ) );
        if( page->IsModified() )
            event.Enable( true );
    }
}
