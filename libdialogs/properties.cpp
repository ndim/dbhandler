// -*- C++ -*-
//
// generated by wxGlade 0.7.2 (standalone edition) on Mon Nov 28 23:55:36 2016
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//
// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#ifndef WX_PRECOMP
    #include "wx/wx.h"
    #include "wx/stockitem.h"
#endif

#include "wx/notebook.h"
#include "wx/bmpcbox.h"
#include "wx/docmdi.h"
#include "wx/fontenum.h"
#ifdef __WXGTK__
#include "gtk/gtk.h"
#include "wx/nativewin.h"
#endif
#ifdef __WXOSX_COCOA__
#include "wx/nativewin.h"
#endif
#include "database.h"
#include "propertypagebase.h"
#include "tablegeneral.h"
#include "fontpropertypagebase.h"
#include "fieldgeneral.h"
#include "fieldheader.h"
#include "properties.h"

#if _MSC_VER >= 1900 || !(defined __WXMSW__)
std::mutex Database::Impl::my_mutex;
#endif
const wxEventTypeTag<wxCommandEvent> wxEVT_SET_TABLE_PROPERTY( wxEVT_USER_FIRST + 1 );
const wxEventTypeTag<wxCommandEvent> wxEVT_SET_FIELD_PROPERTY( wxEVT_USER_FIRST + 2 );

PropertiesDialog::PropertiesDialog(wxWindow* parent, wxWindowID id, const wxString& title, Database *db, int type, void *object, const wxString &tableName, const wxString &schemaName, const wxString &ownerName, wxCriticalSection &cs, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, style)
{
    std::vector<std::wstring> errors;
    pcs = &cs;
    m_isApplied = false;
    m_type = type;
    m_db = db;
    m_dbType = m_db->GetTableVector().m_type;
    m_object = object;
    int res = -1;
    // begin wxGlade: PropertiesDialog::PropertiesDialog
    m_properties = new wxNotebook( this, wxID_ANY );
    if( type == 0 )
    {
        DatabaseTable *table = static_cast<DatabaseTable *>( m_object );
        {
#if defined __WXMSW__ && _MSC_VER < 1900
            wxCriticalSectionLocker( *pcs );
#else
//#if _MSC_VER >= 1900
            std::lock_guard<std::mutex> lock( m_db->GetTableVector().my_mutex );
#endif
            res = db->GetTableProperties( table, errors );
        }
        wxFont data_font( table->GetDataFontSize(), wxFONTFAMILY_DEFAULT, table->GetDataFontItalic() ? wxFONTSTYLE_ITALIC : wxFONTSTYLE_NORMAL, table->GetDataFontWeight() ? wxFONTWEIGHT_BOLD : wxFONTWEIGHT_NORMAL, table->GetDataFontUnderline(), table->GetDataFontName() );
        if( table->GetDataFontStrikethrough() )
            data_font.SetStrikethrough( true );
        wxFont heading_font( table->GetHeadingFontSize(), wxFONTFAMILY_DEFAULT, table->GetHeadingFontItalic() ? wxFONTSTYLE_ITALIC : wxFONTSTYLE_NORMAL, table->GetHeadingFontWeight() ? wxFONTWEIGHT_BOLD : wxFONTWEIGHT_NORMAL, table->GetHeadingFontUnderline(), table->GetHeadingFontName() );
        if( table->GetHeadingFontStrikethrough() )
            heading_font.SetStrikethrough( true );
        wxFont label_font( table->GetLabelFontSize(), wxFONTFAMILY_DEFAULT, table->GetLabelFontItalic() ? wxFONTSTYLE_ITALIC : wxFONTSTYLE_NORMAL, table->GetLabelFontWeight() ? wxFONTWEIGHT_BOLD : wxFONTWEIGHT_NORMAL, table->GetLabelFontUnderline(), table->GetLabelFontName() );
        if( table->GetLabelFontStrikethrough() )
            label_font.SetStrikethrough( true );
        m_page1 = new TableGeneralProperty( m_properties, table, type );
        m_properties->AddPage( m_page1, _( "General" ) );
        m_page2 = new CFontPropertyPage( m_properties, data_font );
        m_page3 = new CFontPropertyPage( m_properties, heading_font );
        m_page4 = new CFontPropertyPage( m_properties, label_font );
        m_properties->AddPage( m_page2, _( "Data Font" ) );
        m_properties->AddPage( m_page3, _( "Heading Font" ) );
        m_properties->AddPage( m_page4, _( "Label Font" ) );
        m_page1->GetCommentCtrl()->SetFocus();
    }
    if( type == 1 )
    {
        Field *field = static_cast<Field *>( m_object );
        wxString fieldName( field->GetFieldName() );
        {
#if defined __WXMSW__ && _MSC_VER < 1900
            wxCriticalSectionLocker( *pcs );
#else
            //#if _MSC_VER >= 1900
            std::lock_guard<std::mutex> lock( m_db->GetTableVector().my_mutex );
#endif
            res = db->GetFieldProperties( tableName.ToStdWstring(), field, errors );
        }
        m_page5 = new FieldGeneral( m_properties, field );
        m_properties->AddPage( m_page5, _( "General" ) );
        m_page6 = new FieldHeader( m_properties );
        m_properties->AddPage( m_page6, _( "Header" ) );
/*        res = db->GetFieldProperties( tableName.ToStdWstring(), schemaName.ToStdWstring(), field, errors );
        if( !res )
        {
            m_page1 = new TableGeneralProperty( m_properties, field, type );
            m_properties->AddPage( m_page1, _( "General" ) );
        }
        else
        {
            for( std::vector<std::wstring>::iterator it = errors.begin(); it < errors.end(); it++ )
                wxMessageBox( (*it) );
        }*/
    }
    if( !res )
    {
        set_properties();
        do_layout();
        // end wxGlade
        wxButton *apply = dynamic_cast<wxButton *>( FindWindowById( wxID_APPLY ) );
        wxButton *ok = dynamic_cast<wxButton *>( FindWindowById( wxID_OK ) );
        ok->SetDefault();
        apply->Enable( false );
        apply->Bind( wxEVT_BUTTON, &PropertiesDialog::OnApply, this );
        apply->Bind( wxEVT_UPDATE_UI, &PropertiesDialog::OnApplyUpdateUI, this );
        ok->Bind( wxEVT_BUTTON, &PropertiesDialog::OnOk, this );
    }
}

void PropertiesDialog::set_properties()
{
    // begin wxGlade: PropertiesDialog::set_properties
//    SetTitle( _( "dialog_1" ) );
    // end wxGlade
}

void PropertiesDialog::do_layout()
{
    // begin wxGlade: PropertiesDialog::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer( wxHORIZONTAL );
    wxBoxSizer* sizer_2 = new wxBoxSizer( wxVERTICAL );
    wxBoxSizer* sizer_3 = new wxBoxSizer( wxVERTICAL );
    wxSizer* buttonSizer = CreateButtonSizer( wxOK | wxCANCEL | wxAPPLY | wxHELP );
    sizer_1->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_3->Add( m_properties, 0, wxEXPAND, 0 );
    sizer_3->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_3->Add( buttonSizer, 0, wxEXPAND, 0 );
    sizer_2->Add( sizer_3, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_1->Add( sizer_2, 0, wxEXPAND, 0 );
    sizer_1->Add( 5, 5, 0, wxEXPAND, 0 );
    SetSizerAndFit( sizer_1 );
//    sizer_1->Fit( this );
    Layout();
    // end wxGlade
}

void PropertiesDialog::OnApply(wxCommandEvent &WXUNUSED(event))
{
    if( ApplyProperties() )
        dynamic_cast<wxButton *>( FindWindowById( wxID_APPLY ) )->Enable( false );
}

void PropertiesDialog::OnOk(wxCommandEvent &WXUNUSED(event))
{
    if( !m_isApplied )
        ApplyProperties();
    EndModal( wxID_OK );
}

bool PropertiesDialog::ApplyProperties()
{
    bool exist, result = true;
    bool isModified/* = ( m_page1->IsModified() || m_page2->IsDirty() || m_page3->IsDirty() || m_page4->IsDirty() )*/;
    for( int i = 0; i < m_properties->GetPageCount(); ++i )
    {
        PropertyPageBase *page = dynamic_cast<PropertyPageBase *>( m_properties->GetPage( i ) );
        if( page->IsModified() )
            isModified = true;
    }
    std::vector<std::wstring> errors;
    if( m_type == 0 )
    {
        if( !m_isApplied && isModified )
        {
            DatabaseTable *table = static_cast<DatabaseTable *>( m_object );
            wxString newComment = m_page1->GetCommentCtrl()->GetValue();
            wxFont dataFont = m_page2->GetFont();
            wxFont headingFont = m_page3->GetFont();
            wxFont labelFont = m_page4->GetFont();
            m_tableProperties.m_comment = newComment.Trim();
            m_tableProperties.m_dataFontName = dataFont.GetFaceName();
            m_tableProperties.m_dataFontSize = dataFont.GetPointSize();
            m_tableProperties.m_isDataFontUnderlined = dataFont.GetUnderlined() ? true : false;
            m_tableProperties.m_isDataFontStriken = dataFont.GetStrikethrough() ? true : false;
            m_tableProperties.m_isDataFontBold = dataFont.GetWeight()  == wxFONTWEIGHT_BOLD ? true : false;
            m_tableProperties.m_isDataFontItalic = dataFont.GetStyle() == wxFONTSTYLE_ITALIC ? true : false;
            m_tableProperties.m_dataFontEncoding = dataFont.GetEncoding();
            m_tableProperties.m_dataFontPixelSize = dataFont.GetPixelSize().GetWidth();
            m_tableProperties.m_headingFontName = headingFont.GetFaceName();
            m_tableProperties.m_headingFontSize = headingFont.GetPointSize();
            m_tableProperties.m_isHeadingFontUnderlined = headingFont.GetUnderlined() ? true : false;
            m_tableProperties.m_isHeadingFontStriken = headingFont.GetStrikethrough() ? true : false;
            m_tableProperties.m_isHeadingFontBold = headingFont.GetWeight() == wxFONTWEIGHT_BOLD ? true : false;
            m_tableProperties.m_isHeadingFontItalic = headingFont.GetStyle() == wxFONTSTYLE_ITALIC ? true : false;
            m_tableProperties.m_headingFontEncoding = headingFont.GetEncoding();
            m_tableProperties.m_headingFontPixelSize = headingFont.GetPixelSize().GetWidth();
            m_tableProperties.m_labelFontName = labelFont.GetFaceName();
            m_tableProperties.m_labelFontSize = labelFont.GetPointSize();
            m_tableProperties.m_isLabelFontUnderlined = labelFont.GetUnderlined() ? true : false;
            m_tableProperties.m_isLabelFontStrioken = labelFont.GetStrikethrough() ? true : false;
            m_tableProperties.m_isLabelFontBold = labelFont.GetWeight() == wxFONTWEIGHT_BOLD ? true : false;
            m_tableProperties.m_isLabelFontItalic = labelFont.GetStyle() == wxFONTSTYLE_ITALIC ? true : false;
            m_tableProperties.m_labelFontEncoding = labelFont.GetEncoding();
            m_tableProperties.m_labelFontPixelSize = labelFont.GetPixelSize().GetWidth();
            wxCommandEvent event( wxEVT_SET_TABLE_PROPERTY );
            event.SetInt( IsLogOnly() );
            event.SetExtraLong( m_type );
            event.SetClientData( &m_tableProperties );
            dynamic_cast<wxDocMDIChildFrame *>( GetParent() )->GetView()->ProcessEvent( event );
            if( event.GetString() == "Failed" )
                result = false;
        }
    }
    if( m_type == 1 )
    {
        Field *field = static_cast<Field *>( m_object );
        field->SetComment( m_page5->GetCommentCtrl()->GetValue().ToStdWstring() );
        field->SetLabel( m_page6->GetLabelCtrl()->GetValue().ToStdWstring() );
        field->SetHeading( m_page6->GetHeadingCtrl()->GetValue().ToStdWstring() );
        wxCommandEvent event( wxEVT_SET_FIELD_PROPERTY );
        event.SetInt( IsLogOnly() );
        event.SetExtraLong( m_type );
        event.SetClientData( &field );
        dynamic_cast<wxDocMDIChildFrame *>( GetParent() )->GetView()->ProcessEvent( event );
        if( event.GetString() == "Failed" )
            result = false;
    }
    m_isApplied = true;
    isModified = false;
    return result;
}

const std::wstring &PropertiesDialog::GetCommand()
{
    return m_command;
}

bool PropertiesDialog::IsLogOnly()
{
    if( m_type == 0 )
        return m_page1->IsLogOnly();
    if( m_type == 1 )
        return m_page5->IsLogOnly();
    else
        return false;
}

void PropertiesDialog::OnApplyUpdateUI (wxUpdateUIEvent &event)
{
    for( int i = 0; i < m_properties->GetPageCount(); ++i )
    {
        PropertyPageBase *page = dynamic_cast<PropertyPageBase *>( m_properties->GetPage( i ) );
        if( page->IsModified() )
            event.Enable( true );
    }
}