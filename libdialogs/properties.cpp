// -*- C++ -*-
//
// generated by wxGlade 0.7.2 (standalone edition) on Mon Nov 28 23:55:36 2016
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//
// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

#ifndef WX_PRECOMP
    #include "wx/wx.h"
    #include "wx/stockitem.h"
#endif

#include "wx/notebook.h"
#include "wx/bmpcbox.h"
#include "database.h"
#include "tablegeneral.h"
#include "fontpropertypagebase.h"
#include "properties.h"

PropertiesDialog::PropertiesDialog(wxWindow* parent, wxWindowID id, const wxString& title, Database *db, int type, void *object, const wxPoint& pos, const wxSize& size, long style):
    wxDialog(parent, id, title, pos, size, style)
{
    std::vector<std::wstring> errors;
    m_type = type;
    m_db = db;
    m_dbType = m_db->GetTableVector().m_type;
    m_object = object;
    // begin wxGlade: PropertiesDialog::PropertiesDialog
    m_properties = new wxNotebook( this, wxID_ANY );
    if( type == 0 )
    {
        wxFont *data_font, *heading_font, *label_font;
        DatabaseTable *table = static_cast<DatabaseTable *>( m_object );
        db->GetTableProperties( table, errors );
        if( table->GetDataFontName() == L"" )
            data_font = wxFont::New( 8, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, "MS Sans Serif" );
        else
            data_font = wxFont::New( table->GetDataFontSize(), wxFONTFAMILY_DEFAULT, table->GetDataFontItalic() ? wxFONTSTYLE_ITALIC : wxFONTSTYLE_NORMAL, table->GetDataFontWeight() ? wxFONTWEIGHT_BOLD : wxFONTWEIGHT_NORMAL, table->GetDataFontUnderline(), table->GetDataFontName() );
        if( table->GetDataFontStrikethrough() )
            data_font->SetStrikethrough( true );
        if( table->GetHeadingFontName() == L"" )
            heading_font = wxFont::New( 8, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, "MS Sans Serif" );
        else
            heading_font = wxFont::New( table->GetHeadingFontSize(), wxFONTFAMILY_DEFAULT, table->GetHeadingFontItalic() ? wxFONTSTYLE_ITALIC : wxFONTSTYLE_NORMAL, table->GetHeadingFontWeight() ? wxFONTWEIGHT_BOLD : wxFONTWEIGHT_NORMAL, table->GetHeadingFontUnderline(), table->GetHeadingFontName() );
        if( table->GetHeadingFontStrikethrough() )
            heading_font->SetStrikethrough( true );
        if( table->GetLabelFontName() == L"" )
            label_font = wxFont::New( 8, wxFONTFAMILY_DEFAULT, wxFONTSTYLE_NORMAL, wxFONTWEIGHT_NORMAL, false, "MS Sans Serif" );
        else
            label_font = wxFont::New( table->GetLabelFontSize(), wxFONTFAMILY_DEFAULT, table->GetLabelFontItalic() ? wxFONTSTYLE_ITALIC : wxFONTSTYLE_NORMAL, table->GetLabelFontWeight() ? wxFONTWEIGHT_BOLD : wxFONTWEIGHT_NORMAL, table->GetLabelFontUnderline(), table->GetLabelFontName() );
        if( table->GetLabelFontStrikethrough() )
            label_font->SetStrikethrough( true );
        m_page1 = new TableGeneralProperty( m_properties, table );
        m_properties->AddPage( m_page1, _( "General" ) );
        m_page2 = new CFontPropertyPage( m_properties, data_font );
        m_page3 = new CFontPropertyPage( m_properties, heading_font );
        m_page4 = new CFontPropertyPage( m_properties, label_font );
        m_properties->AddPage( m_page2, _( "Data Font" ) );
        m_properties->AddPage( m_page3, _( "Heading Font" ) );
        m_properties->AddPage( m_page4, _( "Label Font" ) );
        m_page1->GetCommentCtrl()->SetFocus();
    }
    set_properties();
    do_layout();
    // end wxGlade
    wxButton *apply = dynamic_cast<wxButton *>( FindWindowById( wxID_APPLY ) );
    wxButton *ok = dynamic_cast<wxButton *>( FindWindowById( wxID_OK ) );
    ok->SetDefault();
    apply->Enable( false );
    apply->Bind( wxEVT_BUTTON, &PropertiesDialog::OnApply, this );
    ok->Bind( wxEVT_BUTTON, &PropertiesDialog::OnOk, this );
}

void PropertiesDialog::set_properties()
{
    // begin wxGlade: PropertiesDialog::set_properties
//    SetTitle( _( "dialog_1" ) );
    // end wxGlade
}

void PropertiesDialog::do_layout()
{
    // begin wxGlade: PropertiesDialog::do_layout
    wxBoxSizer* sizer_1 = new wxBoxSizer( wxHORIZONTAL );
    wxBoxSizer* sizer_2 = new wxBoxSizer( wxVERTICAL );
    wxBoxSizer* sizer_3 = new wxBoxSizer( wxVERTICAL );
    wxSizer* buttonSizer = CreateButtonSizer( wxOK | wxCANCEL | wxAPPLY | wxHELP );
    sizer_1->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_3->Add( m_properties, 0, wxEXPAND, 0 );
    sizer_3->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_3->Add( buttonSizer, 0, wxEXPAND, 0 );
    sizer_2->Add( sizer_3, 0, wxEXPAND, 0 );
    sizer_2->Add( 5, 5, 0, wxEXPAND, 0 );
    sizer_1->Add( sizer_2, 0, wxEXPAND, 0 );
    sizer_1->Add( 5, 5, 0, wxEXPAND, 0 );
    SetSizer( sizer_1 );
    sizer_1->Fit( this );
    Layout();
    // end wxGlade
}

void PropertiesDialog::OnApply(wxCommandEvent &event)
{
    ApplyProperties();
}

void PropertiesDialog::OnOk(wxCommandEvent &event)
{
    ApplyProperties();
    EndModal( wxID_OK );
}

bool PropertiesDialog::ApplyProperties()
{
    bool exist;
    std::vector<std::wstring> errors;
    if( m_type == 0 )
    {
        DatabaseTable *table = static_cast<DatabaseTable *>( m_object );
        if( m_page1->IsModified() )
        {
            if( m_db->IsTablePropertiesExist( table->GetTableName(), table->GetSchemaName(), errors ) && errors.size() == 0 )
                exist = true;
            else
                exist = false;
            if( exist )
            {
                m_command = L"UPDATE ";
                if( m_dbType == L"SQLite" )
                    m_command += L"\"sys.abcattbl\" ";
                else
                    m_command += L"\"abcattbl\" ";
                m_command += L"SET ";
                m_command += L"\"abt_cmnt\" ";
                m_command += L"= '";
                m_command += m_page1->GetComment();
                m_command += L"' WHERE ";
                m_command += L"\"abt_tnam\" = '";
                m_command += table->GetTableName();
                m_command += L"' AND ";
                if( m_dbType == L"SQLite" )
                    m_command += L"\"abt_ownr\" = '';";
                else
                {
                    m_command += L"\"abt_ownr\" = '";
                    m_command += table->GetSchemaName();
                    m_command += L"'";
                }
            }
            else
            {
                m_command = L"INSERT INTO ";
                if( m_dbType == L"SQLite" )
                    m_command += L"\"sys.abcattbl\"(\"abt_tnam\", \"abt_ownr\", \"abt_cmnt\") ";
                else
                    m_command += L"\"abcattbl\"(\"abt_tnam\", \"abt_ownr\", \"abt_cmnt\") ";
                m_command += L"VALUES('";
                m_command += table->GetTableName();
                if( m_dbType == L"SQLite" )
                    m_command += L"', '', ";
                else
                {
                    m_command += L"', '";
                    m_command += table->GetSchemaName();
                    m_command += L"', ";
                }
                m_command += L"'";
                m_command += m_page1->GetComment();
                m_command += L"'";
                m_command += L");";
            }
        }
    }
    return true;
}

const std::wstring &PropertiesDialog::GetCommand()
{
    return m_command;
}

bool PropertiesDialog::IsLogOnly()
{
    return m_page1->IsLogOnly();
}
