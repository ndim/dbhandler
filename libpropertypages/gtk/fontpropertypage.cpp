// -*- C++ -*- generated by wxGlade 0.5 on Wed Feb 06 22:39:49 2008
/***************************************************************************
 *   Copyright (C) 2005 by Igor Korot                                      *
 *   igor@IgorsGentoo                                                      *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

#include <gtk/gtk.h>
#include <glib-object.h>
#include "wx/font.h"
#include "wx/fontutil.h"
#include "wx/button.h"
#include "wx/nativewin.h"
#include "fontpropertypagebase.h"
#include "wx/gtk/private.h"

static void font_name_change(GtkTreeView *view, CFontPropertyPage *page)
{
    wxButton *btn = (wxButton *) page->GetParent()->GetParent()->FindWindow( wxID_APPLY );
    if( btn )
    {
        GtkTreeIter iter;
        GValue value = G_VALUE_INIT;
        GList *selRows = NULL;
        btn->Enable();
        GtkTreeSelection *sel = gtk_tree_view_get_selection( view );
        GtkTreeModel *model = gtk_tree_view_get_model( view );
        selRows = gtk_tree_selection_get_selected_rows( sel, &model );
        if( selRows )
        {
            gchar *string1 = gtk_tree_path_to_string( (GtkTreePath *) selRows[0].data );
            g_free( string1 );
            if( gtk_tree_model_get_iter( model, &iter, (GtkTreePath *) selRows[0].data ) )
            {
                gtk_tree_model_get_value( model, &iter, 0, &value );
                gchar *string2 = g_strdup_value_contents( &value );
                g_free( string2 );
            }
        }
        const char *str = g_value_get_string( &value );
        wxString temp = wxGTK_CONV_BACK( g_value_get_string( &value ) );
        page->SetFaceName( temp );
        g_list_free_full( selRows, (GDestroyNotify) gtk_tree_path_free );
    }
}

#if GTK_CHECK_VERSION(3, 2, 0)
#else
static void find_widgets(GtkWidget *view, CFontPropertyPage *page)
{
    if( GTK_IS_CONTAINER( view ) && !GTK_IS_TREE_VIEW( view ) && !GTK_IS_ENTRY( view ) )
        gtk_container_foreach( GTK_CONTAINER( view ), (GtkCallback) find_widgets, page );
    else if( GTK_IS_TREE_VIEW( view ) )
    {
        g_signal_connect( view, "cursor-changed", G_CALLBACK( font_name_change ), page );
        return;
    }
    else if( GTK_IS_ENTRY( view ) )
    {
        g_signal_connect( view, "changed", G_CALLBACK( font_name_change ), page );
        return;
    }
}
#endif

CFontPropertyPage::CFontPropertyPage(wxWindow* parent, wxFont font, int id, const wxPoint& pos, const wxSize& size, long style)
 : CFontPropertyPageBase(parent, font, id, pos, size, wxTAB_TRAVERSAL)
{
    m_font = font;
#if GTK_CHECK_VERSION(3, 2, 0 )
    m_fontPanel = gtk_font_chooser_widget_new();
#else
    m_fontPanel = gtk_font_selection_new();
#endif
    g_object_ref_sink( m_fontPanel );
    m_holder = new wxNativeWindow( this, wxID_ANY, m_fontPanel );
#if GTK_CHECK_VERSION(3, 2, 0 )
    gtk_font_chooser_set_font_desc( (GtkFontChooser *) m_fontPanel, m_font.GetNativeFontInfo()->description );
    gtk_font_chooser_set_preview_text( (GtkFontChooser *) m_fontPanel, "AaBbYyZz" );
    g_signal_connect( m_fontPanel, "notify::font", G_CALLBACK( font_name_change ), this );
#else
    gtk_font_selection_set_font_name( (GtkFontSelection *) m_fontPanel, m_font.GetNativeFontInfo()->ToString().c_str() );
    gtk_font_selection_set_preview_text( (GtkFontSelection *) m_fontPanel, "AaBbYyZz" );
    GtkWidget *names = gtk_font_selection_get_family_list( (GtkFontSelection *) m_fontPanel );
    GtkWidget *sizes = gtk_font_selection_get_size_entry( (GtkFontSelection *) m_fontPanel );
    gtk_container_forall( GTK_CONTAINER( m_fontPanel ), (GtkCallback) find_widgets, this );
#endif
}

CFontPropertyPage::~CFontPropertyPage()
{
    m_holder->Disown();
}
