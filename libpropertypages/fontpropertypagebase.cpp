// -*- C++ -*- generated by wxGlade 0.5 on Wed Feb 06 22:39:49 2008
/***************************************************************************
 *   Copyright (C) 2005 by Igor Korot                                      *
 *   igor@IgorsGentoo                                                      *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

#include "wx/font.h"
#include "wx/bmpcbox.h"
#ifdef __WXMSW__
#include "wx/fontenum.h"
#endif
#if defined __WXGTK__
#include "wx/nativewin.h"
#endif
#ifdef __WXOSX__
#include "wx/fontpicker.h"
#endif
#include "propertypagebase.h"
#include "fontpropertypagebase.h"

CColorComboBox::CColorComboBox( wxWindow *parent, wxWindowID id, wxString selection, const wxPoint &pos, const wxSize &size, int n, const wxString choices[], long style ) :
wxBitmapComboBox( parent, id, selection, pos, size, n, choices, style )
{
    wxFont font;
    m_colors.push_back( ColorStruct( *wxBLACK, "Black" ) );
    m_colors.push_back( ColorStruct( *wxWHITE, "White" ) );
    m_colors.push_back( ColorStruct( *wxRED, "Red" ) );
    m_colors.push_back( ColorStruct( 0xFF00FF, "Fuchsia" ) );
    m_colors.push_back( ColorStruct( 0x32CC32, "Lime" ) );
    m_colors.push_back( ColorStruct( *wxYELLOW, "Yellow" ) );
    m_colors.push_back( ColorStruct( *wxBLUE, "Blue" ) );
    m_colors.push_back( ColorStruct( 0x70DB93, "Aqua" ) );
    m_colors.push_back( ColorStruct( 0x8E236B, "Maroon" ) );
    m_colors.push_back( ColorStruct( 0x8000FF, "Purple" ) );
    for( std::vector<ColorStruct>::iterator it = m_colors.begin(); it < m_colors.end(); ++it )
    {
        int w = 20, h = 10;
        wxMemoryDC dc;
        wxBitmap bmp( w, h );
        dc.SelectObject( bmp );
        wxColour magic( 255, 0, 255 );
        wxBrush magicBrush( magic );
        dc.SetBrush( magicBrush );
        dc.SetPen( *wxBLACK_PEN );
        dc.DrawRectangle( 0, 0, w, h );
        dc.SetBrush( wxBrush( (*it).m_color ) );
        dc.DrawRectangle( 0, 0, w, h );
        dc.SelectObject( wxNullBitmap );
        Append( (*it).m_name, bmp, &(*it).m_color );
    }
}

CFontPropertyPageBase::CFontPropertyPageBase(wxWindow* parent, const wxFont &font, int id, const wxPoint& pos, const wxSize& size, long style)
 : PropertyPageBase(parent, id)
{
    m_dirty = false;
    m_faceName = font.GetFaceName();
    m_weight = font.GetWeight();
    m_underline = font.GetUnderlined();
    m_striken = font.GetStrikethrough();
    m_style = font.GetStyle();
    m_ptSize = font.GetPointSize();
}

CFontPropertyPageBase::~CFontPropertyPageBase()
{
}

void CFontPropertyPageBase::SetFont(const std::wstring &name, int size, bool italic, bool bold, bool underline, bool strikethrough)
{
}

wxFont &CFontPropertyPageBase::GetFont()
{
    return m_font;
}

bool CFontPropertyPageBase::IsDirty()
{
    return m_dirty;
}

wxString &CFontPropertyPageBase::GetFaceName() const
{
    return const_cast<wxString &>( m_faceName );
}

wxFontWeight &CFontPropertyPageBase::GetWeight() const
{
    return const_cast<wxFontWeight &>( m_weight );
}

int CFontPropertyPageBase::GetPointSize() const
{
    return m_ptSize;
}

bool CFontPropertyPageBase::GetUnderline() const
{
    return m_underline;
}

bool CFontPropertyPageBase::GetStrikethrough() const
{
    return m_striken;
}

wxFontStyle CFontPropertyPageBase::GetStyle() const
{
    return m_style;
}

void CFontPropertyPageBase::SetFaceName(const wxString &name)
{
    m_faceName = name;
}
