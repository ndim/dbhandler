// -*- C++ -*- generated by wxGlade 0.5 on Wed Feb 06 22:39:49 2008
/***************************************************************************
 *   Copyright (C) 2005 by Igor Korot                                      *
 *   igor@IgorsGentoo                                                      *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
 ***************************************************************************/
#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

#ifdef __WXMSW__
#include "res/truetype.xpm"
//#include "res/opentype.xpm"
#include "wx/msw/private.h"
#include "wx/msw/dcclient.h"
#include "wx/gbsizer.h"
#include "wx/imaglist.h"
#endif
#ifdef __WXGTK__
#include "pango-1.0/pango/pango.h"
#include "wx/listctrl.h"
#include "wx/fontenum.h"
#endif
#include "wx/font.h"
#include "wx/vector.h"
#include "font.h"
#include "wx/bmpcbox.h"
#include "colorcombobox.h"
#include "propertysheet.h"
#include "fontpropertypage.h"

BEGIN_EVENT_TABLE(wxFontPreviewer, wxWindow)
    EVT_PAINT(wxFontPreviewer::OnPaint)
END_EVENT_TABLE()

void wxFontPreviewer::OnPaint(wxPaintEvent& WXUNUSED(event))
{
    wxPaintDC dc( this );
    wxRect size = GetRect();
    wxFont font = m_font.GetFont();
    dc.SetPen( *wxWHITE_PEN );
    dc.SetBrush( m_font.GetBackgroundColour() );
    dc.DrawRectangle( 0, 0, size.x, size.y );
	if( !font.Ok() )
		font = GetFont();
    if( font.Ok() )
    {
        dc.SetFont( font );
        dc.SetTextForeground( m_font.GetTextColour() );
		wxSize sizeString = dc.GetTextExtent( m_text );
        // Calculate vertical centre
		if( sizeString.x >= size.GetRight() - size.GetLeft() || sizeString.x <= 0 )
			sizeString.x = size.GetLeft();
		else
		{
			sizeString.x = size.GetLeft() + (( size.GetRight() - size.GetLeft() ) - sizeString.x ) / 2;
			sizeString.x = sizeString.x - size.x;
		}
		if( size.y < size.y - (( size.y - size.x ) - sizeString.y ) / 2 )
			sizeString.y = ( size.y - sizeString.y ) /  2;
		else
		{
			sizeString.y = size.y - (( size.y - size.x ) - sizeString.y ) / 2;
			sizeString.y = size.y - sizeString.y;
		}
        dc.DrawText( m_text, sizeString.x, sizeString.y/*(size.y - dc.GetTextExtent( wxT( "X" ) ).y ) / 2*/ );
		dc.SetFont( wxNullFont );
        dc.DestroyClippingRegion();
    }
	dc.SetBrush( wxNullBrush );
	dc.SetPen( wxNullPen );
}

#ifdef __WXMSW__
CFontNamesComboBox::CFontNamesComboBox(wxWindow *parent, wxWindowID id, const wxString &value, const wxPoint &pos, const wxSize &size, int n, const wxString choices[], long style )
	: wxBitmapComboBox( parent, id, value, pos, size, n, choices, style )
{
	#ifdef __WXMSW__
		m_bmp1 = new wxBitmap( truetype );
		m_bmp2 = /*new wxBitmap( opentype )*/NULL;
	#else
		m_bmp1 = NULL;
		m_bmp2 = NULL;
	#endif
}

CFontNamesComboBox::~CFontNamesComboBox()
{
	if( m_bmp1 )
	{
		delete m_bmp1;
		m_bmp1 = NULL;
	}
	if( m_bmp2 )
	{
		delete m_bmp2;
		m_bmp2 = NULL;
	}
}

int CFontNamesComboBox::AddFont( LOGFONT *plf, int type )
{
	if( FindString( plf->lfFaceName ) != wxNOT_FOUND )
		return wxNOT_FOUND;
	if( type == TRUETYPE_FONTTYPE )
	{
		Append( plf->lfFaceName, *m_bmp1, &type );
	}
	else
	{
		Append( plf->lfFaceName, wxNullBitmap, &type );
	}
	return 1;
}

wxSize CFontNamesComboBox::DoGetBestSize() const
{
	int hBitmap = 0;
	int wChoice = 0;
	int hChoice;
	const unsigned int nItems = GetCount();
	for( unsigned int i = 0; i < nItems; i++ )
	{
		int wLine;
		GetTextExtent( GetString( i ), &wLine, NULL );
		if( wLine > wChoice )
			wChoice = wLine;
	}
	if( wChoice == 0 )
		wChoice = 100;
	wChoice += 5 * GetCharWidth();
	if( m_bmp1 )
	{
		wChoice += m_bmp1->GetWidth();
		hBitmap = m_bmp1->GetHeight();
	}
	int cx, cy;
	wxGetCharSize( GetHWND(), &cx, &cy, GetFont() );
	if( hBitmap > cy )
		cy = hBitmap;
	int hItem = SendMessage( GetHwnd(), CB_GETITEMHEIGHT, (WPARAM) -1, 0 );
	hChoice = ( EDIT_HEIGHT_FROM_CHAR_HEIGHT( cy ) * 6 ) + hItem - 6;
	wxSize best( wChoice, hChoice );
	CacheBestSize( best );
	return best;
}

void CFontNamesComboBox::DoSetSize( int x, int y, int width, int height, int sizeFlags )
{
	int heightOrig = height;
//	int hBitmap = 0;
	if( height != wxDefaultCoord )
	{
		int cx, cy;
		wxGetCharSize( GetHWND(), &cx, &cy, GetFont() );
		int hItem = SendMessage( GetHwnd(), CB_GETITEMHEIGHT, (WPARAM) -1, 0 );
//		if( m_bmp1 )
//			hBitmap = m_bmp1->GetHeight();
		height = ( EDIT_HEIGHT_FROM_CHAR_HEIGHT( cy ) * 6 ) + hItem - 6;
	}
	wxControl::DoSetSize( x, y, width, height, sizeFlags );
	if( m_pendingSize != wxDefaultSize )
		m_pendingSize = wxSize( width, heightOrig );
}

CStyleComboBox::CStyleComboBox(wxWindow *parent, wxWindowID id, const wxString &value, const wxPoint &pos, const wxSize &size, int n, const wxString choices[], long style)
	: wxComboBox( parent, id, value, pos, size, n, choices, style )
{
}

wxSize CStyleComboBox::DoGetBestSize() const
{
	int wChoice = 0;
	int hChoice;
	const unsigned int nItems = GetCount();
	for( unsigned int i = 0; i < nItems; i++ )
	{
		int wLine;
		GetTextExtent( GetString( i ), &wLine, NULL );
		if( wLine > wChoice )
			wChoice = wLine;
	}
	if( wChoice == 0 )
		wChoice = 100;
	wChoice += 5 * GetCharWidth();
	int cx, cy;
	wxGetCharSize( GetHWND(), &cx, &cy, GetFont() );
	int hItem = SendMessage( GetHwnd(), CB_GETITEMHEIGHT, (WPARAM) -1, 0 );
	hChoice = ( EDIT_HEIGHT_FROM_CHAR_HEIGHT( cy ) * 6 ) + hItem  - 6;
	wxSize best( wChoice, hChoice );
	CacheBestSize( best );
	return best;
}

void CStyleComboBox::DoSetSize( int x, int y, int width, int height, int sizeFlags )
{
    int heightOrig = height;
	if( height != wxDefaultCoord )
	{
		int cx, cy;
		wxGetCharSize( GetHWND(), &cx, &cy, GetFont() );
		int hItem = SendMessage( GetHwnd(), CB_GETITEMHEIGHT, (WPARAM) -1, 0 );
		height = ( EDIT_HEIGHT_FROM_CHAR_HEIGHT( cy ) * 6 ) + hItem;
	}
	wxControl::DoSetSize( x, y, width, height, sizeFlags );
	if( m_pendingSize != wxDefaultSize )
		m_pendingSize = wxSize( width, heightOrig );
}

CSizeComboBox::CSizeComboBox(wxWindow *parent, wxWindowID id, const wxString &value, const wxPoint &pos, const wxSize &size, int n, const wxString choices[], long style)
	: wxComboBox( parent, id, value, pos, size, n, choices, style )
{
	HDC dc = ::GetDC( NULL );
	m_cyppi = ::GetDeviceCaps( dc, LOGPIXELSY );
}

int CSizeComboBox::AddSize(int size, int lfHeight)
{
	int pointSize;
	if( lfHeight != 0 )
		pointSize = ::MulDiv( size, 72, m_cyppi );
	else
		pointSize = size;
	if( lfHeight == 0 )
		lfHeight = ::MulDiv( -m_cyppi, size, 72 );
	int max = GetCount(), i;
	wxString str;
	wxStringBuffer( str, 16 );
	str.Printf( "%d", pointSize );
	if( lfHeight > 0 )
	{
		for( i = 0; i < max; i++ )
		{
			int iComp = (int)( lfHeight - GetFontHeight() );
			if( !iComp )
				return CB_ERR;
			if( iComp < 0 )
				break;
		}
	}
	else
	{
		for( i = 0; i < max; i++ )
		{
			int iComp = (int)( lfHeight - GetFontHeight() );
			if( !iComp )
				return CB_ERR;
			if( iComp > 0 )
				break;
		}
	}
	if( i == max )
		i = Append( str, &lfHeight );
	else
		i = Insert( str, i, &lfHeight );
	return i;
}

LONG CSizeComboBox::GetFontHeight()
{
	return GetSelection();
}

wxSize CSizeComboBox::DoGetBestSize() const
{
	int wChoice = 0;
	int hChoice;
	const unsigned int nItems = GetCount();
	for( unsigned int i = 0; i < nItems; i++ )
	{
		int wLine;
		GetTextExtent( GetString( i ), &wLine, NULL );
		if( wLine > wChoice )
			wChoice = wLine;
	}
	if( wChoice == 0 )
		wChoice = 100;
	wChoice += 5 * GetCharWidth();
	int cx, cy;
	wxGetCharSize( GetHWND(), &cx, &cy, GetFont() );
	int hItem = SendMessage( GetHwnd(), CB_GETITEMHEIGHT, (WPARAM) -1, 0 );
	hChoice = ( EDIT_HEIGHT_FROM_CHAR_HEIGHT( cy ) * 6 ) + hItem  - 6;
	wxSize best( wChoice, hChoice );
	CacheBestSize( best );
	return best;
}

void CSizeComboBox::DoSetSize( int x, int y, int width, int height, int sizeFlags )
{
	int heightOrig = height;
	if( height != wxDefaultCoord )
	{
		int cx, cy;
		wxGetCharSize( GetHWND(), &cx, &cy, GetFont() );
		int hItem = SendMessage( GetHwnd(), CB_GETITEMHEIGHT, (WPARAM) -1, 0 );
		height = ( EDIT_HEIGHT_FROM_CHAR_HEIGHT( cy ) * 6 ) + hItem;
	}
	wxControl::DoSetSize( x, y, width, height, sizeFlags );
	if( m_pendingSize != wxDefaultSize )
		m_pendingSize = wxSize( width, heightOrig );
}
#endif

BEGIN_EVENT_TABLE(CFontPropertyPage, CPropertySheet)
#ifdef __WXGTK__
	EVT_LISTBOX(wxID_FONT_FAMILY,CFontPropertyPage::OnChangeFont)
	EVT_LISTBOX(wxID_FONT_STYLE, CFontPropertyPage::OnChangeFont)
	EVT_LISTBOX(wxID_FONT_SIZE, CFontPropertyPage::OnChangeFont)
#endif
#ifdef __WXMSW__
	EVT_COMBOBOX(wxID_FONT_FAMILY, CFontPropertyPage::OnChangeFont)
	EVT_COMBOBOX(wxID_FONT_STYLE, CFontPropertyPage::OnChangeFont)
	EVT_COMBOBOX(wxID_FONT_SIZE, CFontPropertyPage::OnChangeFont)
#endif
	EVT_CHECKBOX(wxID_FONT_UNDERLINE, CFontPropertyPage::OnChangeFont)
	EVT_CHOICE(wxID_FONT_WEIGHT, CFontPropertyPage::OnChangeFont)
	EVT_CHOICE(wxID_FONT_COLOUR, CFontPropertyPage::OnChangeFont)
//    EVT_CLOSE(CFontPropertyPage::OnCloseWindow)
END_EVENT_TABLE()

CFontPropertyPage::CFontPropertyPage(wxWindow* parent, CFont font, int id, const wxPoint& pos, const wxSize& size, long style)
 : CPropertySheet(parent, id, pos, size, wxTAB_TRAVERSAL)
{
	m_bUnderline = false;
	wxString text;
#ifdef __WXMSW__
	text = "AaBbYyZz";
#else
	text = "The Quick Brown Fox Jumps Over Lazy Dog";
#endif
	style = style;
	m_font = font.GetFont();
	m_fontSize.Format( "%d", m_font.GetPointSize() );
#ifdef __WXMSW__
	if( m_font.GetStyle() == wxITALIC && m_font.GetWeight() == wxBOLD )
		m_nCurrentStyle = NTM_ITALIC | NTM_BOLD;
	else if( m_font.GetStyle() == wxITALIC )
		m_nCurrentStyle = NTM_ITALIC;
	else if( m_font.GetWeight() == wxBOLD )
		m_nCurrentStyle = NTM_BOLD;
	else
		m_nCurrentStyle = NTM_REGULAR;
#endif
#ifdef __WXGTK__
	if( m_font.GetStyle() == wxITALIC && m_font.GetWeight() == wxBOLD )
		m_nCurrentStyle = wxITALIC | wxBOLD;
	else if( m_font.GetStyle() == wxITALIC )
		m_nCurrentStyle = wxITALIC;
	else if( m_font.GetWeight() == wxBOLD )
		m_nCurrentStyle = wxBOLD;
	else
		m_nCurrentStyle = wxNORMAL;
#endif
	m_nActualStyle = m_nCurrentStyle;
	if( m_font.GetUnderlined() )
		m_bUnderline = true;
	m_textStr = font.GetTextDescription();
	m_backgroundStr = font.GetBackgroundDescription();
	itemStaticText6 = new wxStaticText( this, wxID_STATIC, _T( "&Font:" ), wxDefaultPosition, wxDefaultSize, 0 );
#ifdef __WXMSW__
	itemChoice7 = new CFontNamesComboBox( this, wxID_FONT_FAMILY );
#else
	itemChoice7 = new wxListBox( this, wxID_FONT_FAMILY, wxDefaultPosition, wxDefaultSize, 0, NULL, wxLC_SINGLE_SEL | wxLC_SORT_ASCENDING );
#endif
	itemStaticText9 = new wxStaticText( this, wxID_STATIC, _T("Font St&yles:"), wxDefaultPosition, wxDefaultSize, 0 );
#ifdef __WXMSW__
	itemChoice10 = new CStyleComboBox( this, wxID_FONT_STYLE, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0, NULL, wxCB_SIMPLE );
#else
	itemChoice10 = new wxListBox( this, wxID_FONT_STYLE, wxDefaultPosition, wxDefaultSize, 0, NULL, 0 );
#endif
	itemStaticText18 = new wxStaticText( this, wxID_STATIC, _T("&Size:"), wxDefaultPosition, wxDefaultSize, 0 );
#ifdef __WXMSW__
	itemChoice19 = new CSizeComboBox( this, wxID_FONT_SIZE, wxEmptyString, wxDefaultPosition, wxDefaultSize, 0, NULL, wxCB_SIMPLE );
#else
	itemChoice19 = new wxListBox( this, wxID_FONT_SIZE, wxDefaultPosition, wxDefaultSize, 0, NULL );
#endif
#ifdef __WXMSW__
	itemCheckBox1 = new wxCheckBox( this, wxID_ANY, _T( "Stri&keout" ) );
	itemCheckBox2 = new wxCheckBox( this, wxID_ANY, _T( "&Underline" ) );
	itemStaticBox1 = new wxStaticBox( this, wxID_ANY, _T( "Effects" ) );
	itemStaticBox2 = new wxStaticBox( this, wxID_ANY, _T( "Sample" ) );
	itemStaticText15 = new wxStaticText( this, wxID_STATIC, _T( "&Text Color:" ), wxDefaultPosition, wxDefaultSize, 0 );
	itemChoice16 = new CColorComboBox( this, wxID_FONT_COLOUR, wxEmptyString, wxDefaultPosition, wxDefaultSize );
	itemStaticText23 = new wxStaticText( this, wxID_STATIC, _T("&Background:"), wxDefaultPosition, wxDefaultSize, 0 );
	itemChoice17 = new CColorComboBox( this, wxID_FONT_COLOUR, wxEmptyString, wxDefaultPosition, wxDefaultSize );
#endif
	itemWindow24 = new wxFontPreviewer( this, font, text );
#ifdef __WXMSW__
	itemWindow24->SetMinSize( wxSize( 130, 32 ) );
#endif
	itemStaticText30 = new wxStaticText( this, wxID_STATIC, _T( "" ), wxDefaultPosition, wxDefaultSize, 0 );
	do_layout();
	set_properties();
	SetDirty( false );
}

CFontPropertyPage::~CFontPropertyPage()
{
}

void CFontPropertyPage::do_layout()
{
	wxBoxSizer* sizer1 = new wxBoxSizer( wxVERTICAL );
	wxBoxSizer* sizer2 = new wxBoxSizer( wxHORIZONTAL );
	sizer1->Add( 5, 5, 0, wxEXPAND|wxGROW|wxALL, 0 );
	sizer2->Add( 5, 5, 0, wxEXPAND|wxGROW|wxALL, 0 );
#ifdef __WXMSW__
	wxGridBagSizer *sizer_3 = new wxGridBagSizer();
	wxStaticBoxSizer *sizer_4 = new wxStaticBoxSizer( itemStaticBox1, wxVERTICAL );
	wxStaticBoxSizer *sizer_5 = new wxStaticBoxSizer( itemStaticBox2, wxVERTICAL );
	wxBoxSizer *sizer_6 = new wxBoxSizer( wxVERTICAL );
	wxBoxSizer *sizer_7 = new wxBoxSizer( wxVERTICAL );
	sizer_3->Add( itemStaticText6, wxGBPosition( 0, 0 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 5, 20, wxGBPosition( 0, 1 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( itemStaticText9, wxGBPosition( 0, 2 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 5, 20, wxGBPosition( 0, 3 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( itemStaticText18, wxGBPosition( 0, 4 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( itemChoice7, wxGBPosition( 1, 0 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 5, 20, wxGBPosition( 1, 1 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( itemChoice10, wxGBPosition( 1, 2 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 5, 20, wxGBPosition( 1, 3 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( itemChoice19, wxGBPosition( 1,4 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 20, 5, wxGBPosition( 2, 0 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 5, 20, wxGBPosition( 2, 1 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 20, 5, wxGBPosition( 2, 2 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 5, 20, wxGBPosition( 2, 3 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 20, 5, wxGBPosition( 2, 4 ), wxDefaultSpan, wxEXPAND );
	sizer_4->Add( itemCheckBox1, 0, wxEXPAND, 0 );
	sizer_4->Add( 20, 5, 0, wxEXPAND, 0 );
	sizer_4->Add( itemCheckBox2, 0, wxEXPAND, 0 );
	sizer_3->Add( sizer_4, wxGBPosition( 3, 0 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 5, 20, wxGBPosition( 3, 1 ), wxDefaultSpan, wxEXPAND );
	sizer_5->Add( itemWindow24, 0, wxALIGN_CENTER_HORIZONTAL | wxALIGN_CENTER_VERTICAL, 0 );
	sizer_3->Add( sizer_5, wxGBPosition( 3, 2 ), wxGBSpan( 1, 3 ), wxEXPAND );
	sizer_3->Add( 20, 5, wxGBPosition( 4, 0 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 5, 20, wxGBPosition( 4, 1 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 20, 5, wxGBPosition( 4, 2 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 5, 20, wxGBPosition( 4, 3 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 20, 5, wxGBPosition( 4, 4 ), wxDefaultSpan, wxEXPAND );
	sizer_6->Add( itemStaticText15, 0, wxALIGN_CENTER_VERTICAL, 0 );
	sizer_6->Add( 20, 5, 0, wxEXPAND, 0 );
	sizer_6->Add( itemChoice16, 0, wxEXPAND, 0 );
	sizer_3->Add( sizer_6, wxGBPosition( 5, 0 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 5, 5, wxGBPosition( 5, 1 ), wxDefaultSpan, wxEXPAND );
	sizer_7->Add( itemStaticText23, 0, wxALIGN_CENTER_VERTICAL, 0 );
	sizer_7->Add( 20, 5, 0, wxEXPAND, 0 );
	sizer_7->Add( itemChoice17, 0, wxEXPAND, 0 );
	sizer_3->Add( sizer_7, wxGBPosition( 5, 2 ), wxGBSpan( 1, 3 ), wxEXPAND );
	sizer_3->Add( 20, 5, wxGBPosition( 6, 0 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 5, 5, wxGBPosition( 6, 1 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 20, 5, wxGBPosition( 6, 2 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 5, 5, wxGBPosition( 6, 3 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( 20, 5, wxGBPosition( 6, 4 ), wxDefaultSpan, wxEXPAND );
	sizer_3->Add( itemStaticText30, wxGBPosition( 7, 0 ), wxGBSpan( 1, 5 ), wxEXPAND | wxALIGN_CENTER_HORIZONTAL, 0 );
#else
	wxBoxSizer *sizer_3 = new wxBoxSizer( wxVERTICAL );
	wxBoxSizer *sizer_4 = new wxBoxSizer( wxHORIZONTAL );
	wxBoxSizer *sizer_5 = new wxBoxSizer( wxVERTICAL );
	wxBoxSizer *sizer_6 = new wxBoxSizer( wxVERTICAL );
	wxBoxSizer *sizer_7 = new wxBoxSizer( wxVERTICAL );
	sizer_5->Add( itemStaticText6, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0 );
	sizer_5->Add( itemChoice7, 0, wxEXPAND, 0 );
	sizer_4->Add( sizer_5, 0, wxEXPAND, 0 );
	sizer_4->Add( 5, 20, 0, wxEXPAND, 0 );
	sizer_6->Add( itemStaticText9, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0 );
	sizer_6->Add( itemChoice10, 1, wxEXPAND, 0 );
	sizer_4->Add( sizer_6, 0, wxEXPAND, 0 );
	sizer_4->Add( 5, 20, 0, wxEXPAND, 0 );
	sizer_7->Add( itemStaticText18, 0, wxEXPAND|wxALIGN_CENTER_VERTICAL, 0 );
	sizer_7->Add( itemChoice19, 1, wxEXPAND, 0 );
	sizer_4->Add( sizer_7, 0, wxEXPAND, 0 );
	sizer_3->Add( sizer_4, 0, wxEXPAND, 0 );
	sizer_3->Add( 20, 5, 0, wxEXPAND, 0 );
	sizer_3->Add( itemWindow24, 0, wxEXPAND|wxALIGN_CENTER_HORIZONTAL|wxALIGN_CENTER_VERTICAL, 0 );
#endif
	sizer2->Add( sizer_3, 0, wxEXPAND, 0 );
	sizer2->Add( 5, 5, 0, wxEXPAND|wxGROW|wxALL, 0 );
	sizer1->Add( sizer2, 0, wxEXPAND|wxGROW|wxALL, 0 );
	sizer1->Add( 5, 5, 0, wxEXPAND|wxGROW|wxALL, 0 );
	SetSizer( sizer1 );
	sizer1->Fit( this );
	Layout();
}

void CFontPropertyPage::set_properties()
{
	FillFacenameList();
	int sel = itemChoice7->FindString( m_font.GetFaceName() );
	if( sel != wxNOT_FOUND )
	{
		itemChoice7->SetSelection( sel );
		FillSizeList();
	}
#ifdef __WXMSW__
	itemChoice16->SetValue( m_textStr );
	itemChoice17->SetValue( m_backgroundStr );
#endif
	if( m_font.GetUnderlined() )
		itemCheckBox2->Enable( true );
	if( m_font.GetStyle() == wxITALIC && m_font.GetWeight() == wxBOLD )
		itemChoice10->SetSelection( itemChoice10->FindString( "Bold Italic" ) );
	if( m_font.GetStyle() == wxITALIC )
		itemChoice10->SetSelection( itemChoice10->FindString( "Italic" ) );
	if( m_font.GetWeight() == wxBOLD )
		itemChoice10->SetSelection( itemChoice10->FindString( "Bold" ) );
}

void CFontPropertyPage::OnChangeFont(wxCommandEvent &event)
{
	if( event.GetId() == wxID_FONT_FAMILY )
		FillSizeList();
	int curSel = itemChoice10->GetSelection();
	m_nCurrentStyle = (unsigned long) itemChoice10->GetClientData( curSel );
	m_nActualStyle = m_nCurrentStyle;
	UpdateSampleFont();
//	((CPropertiesDialog *)GetParent()->GetParent())->SetDirty( true );
}

void CFontPropertyPage::FillSizeList()
{
	itemChoice10->Clear();
	itemChoice19->Clear();
	wxString strFaceName = itemChoice7->GetStringSelection();
	int entry;
#ifdef __WXMSW__
	wxArrayInt ttSizes;
	ttSizes.Add( 8 );
	ttSizes.Add( 9 );
	ttSizes.Add( 10 );
	ttSizes.Add( 11 );
	ttSizes.Add( 12 );
	ttSizes.Add( 14 );
	ttSizes.Add( 16 );
	ttSizes.Add( 18 );
	ttSizes.Add( 20 );
	ttSizes.Add( 22 );
	ttSizes.Add( 24 );
	ttSizes.Add( 26 );
	ttSizes.Add( 28 );
	ttSizes.Add( 36 );
	ttSizes.Add( 48 );
	ttSizes.Add( 72 );
	HDC dc = ::GetDC( NULL );
	EnumFontFamilies( dc, strFaceName, (FONTENUMPROC) CFontPropertyPage::EnumFontFamiliesCallback2, (LPARAM) this );
	::ReleaseDC( NULL, dc );
	if( (int) itemChoice7->GetClientData( itemChoice7->GetSelection() ) != RASTER_FONTTYPE )
	{
		for( unsigned int i = 0; i < ttSizes.GetCount(); i++ )
			itemChoice19->AddSize( ttSizes[i], 0 );
	}
	BOOL bRegular = (BOOL)( m_nStyles & NTM_REGULAR );
	BOOL bBold = (BOOL)( m_nStyles & NTM_BOLD );
	BOOL bItalic = (BOOL)( m_nStyles & NTM_ITALIC );
	BOOL bBoldItalic = (BOOL)( ( m_nStyles & NTM_BOLD ) && ( m_nStyles & NTM_ITALIC ) );
	if (bRegular)
		bBold = bItalic = TRUE;
	if (bBold || bItalic)
		bBoldItalic = TRUE;

	if( bRegular )
	{
		entry = itemChoice10->Append( "Regular" );
		itemChoice10->SetClientData( entry, (void *) NTM_REGULAR );
	}
	if( bBold )
	{
		entry = itemChoice10->Append( "Bold" );
		itemChoice10->SetClientData( entry, (void *) NTM_BOLD );
	}
	if( bItalic )
	{
		entry = itemChoice10->Append( "Italic" );
		itemChoice10->SetClientData( entry, (void *) NTM_ITALIC );
	}
	if( bBoldItalic )
	{
		entry = itemChoice10->Append( "Bold Italic" );
		itemChoice10->SetClientData( entry, (void *) ( NTM_BOLD | NTM_ITALIC ) );
	}
	int sel = itemChoice19->FindString( m_fontSize );
	if( sel != wxNOT_FOUND )
	{
		itemChoice19->SetSelection( sel );
	}
	else
	{
		itemChoice19->SetValue( m_fontSize );
	}
	bool found = false;
	for( unsigned int i = 0; i < itemChoice10->GetCount(); i++ )
	{
		if( (DWORD) itemChoice10->GetClientData( i ) == m_nActualStyle )
		{
			itemChoice10->SetSelection( i );
			found = true;
		}
	}
	if( !found )
	{
		itemChoice10->SetSelection( 0 );
		m_nCurrentStyle = NTM_REGULAR;
	}
	else
		m_nCurrentStyle = m_nActualStyle;
	if( m_bUnderline )
		itemCheckBox1->SetValue( true );
#endif
#ifdef __WXGTK__
	wxArrayString ttSizes;
	ttSizes.Add( "8" );
	ttSizes.Add( "9" );
	ttSizes.Add( "10" );
	ttSizes.Add( "11" );
	ttSizes.Add( "12" );
	ttSizes.Add( "14" );
	ttSizes.Add( "16" );
	ttSizes.Add( "18" );
	ttSizes.Add( "20" );
	ttSizes.Add( "22" );
	ttSizes.Add( "24" );
	ttSizes.Add( "26" );
	ttSizes.Add( "28" );
	ttSizes.Add( "36" );
	ttSizes.Add( "48" );
	ttSizes.Add( "72" );
	int **sizes;
	int *n_sizes;
	PangoFontDescription *desc = pango_font_description_from_string( strFaceName );
//	pango_font_description_get_size
//	pango_font_face_list_sizes( (PangoFontFace *) desc, sizes, n_sizes );
	itemChoice19->InsertItems( ttSizes, 0 );
	itemChoice19->SetSelection( m_font.GetPointSize() );
/*	if( *n_sizes == 0 )
		itemChoice19->InsertItems( ttSizes, 0 );
	else
	{
		for( int i = 0; i < *n_sizes; i++ )
		{
			wxString temp;
			temp.Printf( "%d", *sizes[i] );
			itemChoice19->Append( temp );
		}
	}*/
	;
	PangoStyle style = pango_font_description_get_style( desc );
	PangoWeight weight = pango_font_description_get_weight( desc );
	bool bBold = weight & PANGO_WEIGHT_BOLD;
	bool bItalic = style & PANGO_STYLE_ITALIC;
	bool bBoldItalic = style & PANGO_STYLE_ITALIC && weight & PANGO_WEIGHT_BOLD;
	if( bBold )
		itemChoice10->Append( "Bold" );
	if( bItalic )
		itemChoice10->Append( "Italic" );
	if( bBoldItalic )
		itemChoice10->Append( "Bold Italic" );
	pango_font_description_free( desc );
#endif
	UpdateSampleFont();
}

#ifdef __WXMSW__
int CALLBACK CFontPropertyPage::EnumFontFamiliesCallback(ENUMLOGFONT *lpelf, NEWTEXTMETRIC *, int FontType, LPARAM lParam)
{
	CFontPropertyPage *pPage = (CFontPropertyPage *) lParam;
	wxASSERT( pPage );
/*	if( FontType == TRUETYPE_FONTTYPE )
	{
		pPage->itemChoice7->AddFont( &lpelf->elfLogFont, FontType );
	}
	else
	{
		pPage->itemChoice7->AddFont( &lpelf->elfLogFont, 0 );
	}*/
	pPage->itemChoice7->AddFont( &lpelf->elfLogFont, FontType );
	return 1;
}

int CALLBACK CFontPropertyPage::EnumFontFamiliesCallback2(ENUMLOGFONT *lpelf, NEWTEXTMETRIC *lpntm, int FontType, LPARAM lParam)
{
	CFontPropertyPage *pPage = (CFontPropertyPage *) lParam;
	wxASSERT( pPage );
	if( FontType & TRUETYPE_FONTTYPE )
	{
		if( !( lpntm->ntmFlags & ( NTM_BOLD | NTM_ITALIC ) ) )
			pPage->m_nStyles |= NTM_REGULAR;
		if( lpntm->ntmFlags & NTM_ITALIC )
			pPage->m_nStyles |= NTM_ITALIC;
		if( lpntm->ntmFlags & NTM_BOLD )
			pPage->m_nStyles |= NTM_BOLD;
	}
	else
	{
		if( FontType & RASTER_FONTTYPE )
		{
			int height = lpntm->tmHeight - lpntm->tmInternalLeading;
			pPage->itemChoice19->AddSize( height, height );
		}
		if( lpelf->elfLogFont.lfWeight >= FW_BOLD && lpelf->elfLogFont.lfItalic )
			pPage->m_nStyles |= NTM_BOLD | NTM_ITALIC;
		else if( lpelf->elfLogFont.lfWeight >= FW_BOLD )
			pPage->m_nStyles |= NTM_BOLD;
		else if( lpelf->elfLogFont.lfItalic )
			pPage->m_nStyles |= NTM_ITALIC;
		else
			pPage->m_nStyles |= NTM_REGULAR;
	}
	return 1;
}
#endif

void CFontPropertyPage::FillFacenameList()
{
#ifdef __WXMSW__
	HDC dc = ::GetDC( NULL );
	EnumFontFamilies( dc, NULL, (FONTENUMPROC) CFontPropertyPage::EnumFontFamiliesCallback, (LPARAM) this );
	::ReleaseDC( NULL, dc );
#else
	MyFontEnumerator fontEnumerator;
	fontEnumerator.EnumerateFacenames();
	if( fontEnumerator.GotAny() )
	{
		int count = fontEnumerator.GetFacenames().GetCount();
		for( int i = 0; i < count; i++ )
			itemChoice7->Append( fontEnumerator.GetFacenames().Item( i ) );
	}
#endif
}

void CFontPropertyPage::UpdateSampleFont()
{
//	bool isBold = false, isItalic = false, isUnderline = false;
#ifdef __WXMSW
	wxString name = itemChoice7->GetSelection();
	int height = itemChoice19->GetFontHeight();
	if( m_nCurrentStyle & NTM_BOLD )
		isBold = true;
	if( m_nCurrentStyle & NTM_ITALIC )
		isItalic = true;

#else
//	int selection = itemChoice19->GetSelection();
//	int height = (int) itemChoice19->GetClientData( selection );
#endif
}

void CFontPropertyPage::GetData(void *WXUNUSED(data))
{
	SetDirty( false );
}
